# ChainQuest - Cross-Chain Tournament Automation
# This workflow manages automated tournaments across multiple blockchains

name: "Cross-Chain Tournament System"
description: "Automated tournament creation, matchmaking, and prize distribution across chains"

triggers:
  # Tournament registration events
  - name: "tournament_registration"
    type: "contract_event"
    contract: "0x..." # Tournament Manager contract
    event: "PlayerRegistered"
    chains: ["ethereum", "polygon", "bsc", "arbitrum"]
    
  # Scheduled tournament creation
  - name: "weekly_tournament"
    type: "schedule"
    cron: "0 18 * * 5" # Every Friday at 6 PM UTC
    
  - name: "daily_arena"
    type: "schedule" 
    cron: "0 12 * * *" # Daily at noon UTC
    
  # Battle completion events
  - name: "battle_completed"
    type: "contract_event"
    contract: "0x..." # Battle Arena contract
    event: "BattleCompleted"
    chains: ["ethereum", "polygon", "bsc", "arbitrum"]

actions:
  # Create new tournaments automatically
  - name: "create_weekly_tournament"
    type: "contract_call"
    contract: "0x..." # Tournament Factory contract
    function: "createTournament"
    conditions:
      - trigger: "weekly_tournament"
    parameters:
      - name: "tournamentType"
        value: "weekly_championship"
      - name: "prizePool"
        value: "1000" # 1000 tokens
      - name: "maxParticipants"
        value: "64"
      - name: "registrationDeadline"
        value: "{{time.now + 24h}}"
        
  - name: "create_daily_arena"
    type: "contract_call"
    contract: "0x..." # Arena Manager contract
    function: "createArena"
    conditions:
      - trigger: "daily_arena"
    parameters:
      - name: "arenaType"
        value: "daily_skirmish"
      - name: "duration"
        value: "4h" # 4 hour battles
      - name: "entryFee"
        value: "10" # 10 tokens
        
  # Cross-chain matchmaking
  - name: "cross_chain_matchmaking"
    type: "cross_chain_call"
    source_chain: "ethereum" # Coordinator chain
    target_chains: ["polygon", "bsc", "arbitrum"]
    contract: "0x..." # Matchmaking contract
    function: "findCrossChainOpponents"
    conditions:
      - trigger: "tournament_registration"
      - registration_count: ">= 2"
    parameters:
      - name: "tournamentId"
        value: "{{trigger.tournamentId}}"
      - name: "playerChain"
        value: "{{trigger.chain}}"
      - name: "playerStats"
        value: "{{player.battleStats}}"
        
  # Automatic battle execution
  - name: "execute_battle"
    type: "contract_call"
    contract: "0x..." # Battle Engine contract
    function: "executeBattle"
    conditions:
      - action: "cross_chain_matchmaking"
      - matchmaking_result.matched: true
    parameters:
      - name: "player1"
        value: "{{matchmaking_result.player1}}"
      - name: "player2" 
        value: "{{matchmaking_result.player2}}"
      - name: "battleType"
        value: "{{tournament.battleType}}"
      - name: "tournamentId"
        value: "{{trigger.tournamentId}}"
        
  # Tournament progression management
  - name: "advance_tournament"
    type: "contract_call"
    contract: "0x..." # Tournament Manager contract
    function: "advanceRound"
    conditions:
      - trigger: "battle_completed"
      - battle.tournamentBattle: true
    parameters:
      - name: "tournamentId"
        value: "{{trigger.tournamentId}}"
      - name: "winner"
        value: "{{trigger.winner}}"
      - name: "roundNumber"
        value: "{{tournament.currentRound}}"
        
  # Automated prize distribution
  - name: "distribute_tournament_prizes"
    type: "cross_chain_call"
    source_chain: "ethereum"
    target_chains: ["polygon", "bsc", "arbitrum"]
    contract: "0x..." # Prize Manager contract
    function: "distributePrizes"
    conditions:
      - action: "advance_tournament"
      - tournament.status: "completed"
    parameters:
      - name: "tournamentId"
        value: "{{trigger.tournamentId}}"
      - name: "winners"
        value: "{{tournament.finalRankings}}"
      - name: "prizeDistribution"
        value: "{{tournament.prizeBreakdown}}"
        
  # Cross-chain leaderboard updates
  - name: "update_global_leaderboard"
    type: "cross_chain_call"
    source_chain: "{{trigger.chain}}"
    target_chains: ["ethereum", "polygon", "bsc", "arbitrum"]
    contract: "0x..." # Leaderboard contract
    function: "updateRankings"
    conditions:
      - trigger: "battle_completed"
    parameters:
      - name: "winner"
        value: "{{trigger.winner}}"
      - name: "loser"
        value: "{{trigger.loser}}"
      - name: "battleType"
        value: "{{trigger.battleType}}"
      - name: "eloChange"
        value: "{{battle.eloChange}}"

# Special tournament events
special_events:
  # Cross-chain championship (monthly)
  - name: "monthly_championship"
    type: "contract_call"
    contract: "0x..." # Championship Manager contract
    function: "createChampionship"
    trigger:
      type: "schedule"
      cron: "0 0 1 * *" # First day of each month
    parameters:
      - name: "championshipType"
        value: "cross_chain_grand_prix"
      - name: "prizePool"
        value: "10000" # 10,000 tokens
      - name: "qualificationPeriod"
        value: "7d" # 7 days to qualify

notifications:
  - name: "tournament_created"
    type: "webhook"
    url: "https://chainquest-backend.vercel.app/webhooks/tournament-created"
    conditions:
      - action: "create_weekly_tournament"
      - action: "create_daily_arena"
    payload:
      tournamentId: "{{action.tournamentId}}"
      type: "{{action.tournamentType}}"
      prizePool: "{{action.prizePool}}"
      registrationDeadline: "{{action.registrationDeadline}}"
      
  - name: "battle_result"
    type: "webhook"
    url: "https://chainquest-backend.vercel.app/webhooks/battle-result"
    conditions:
      - action: "execute_battle"
    payload:
      battleId: "{{action.battleId}}"
      winner: "{{action.winner}}"
      loser: "{{action.loser}}"
      tournamentId: "{{trigger.tournamentId}}"
      
  - name: "tournament_completed"
    type: "webhook"
    url: "https://chainquest-backend.vercel.app/webhooks/tournament-completed"
    conditions:
      - action: "distribute_tournament_prizes"
    payload:
      tournamentId: "{{trigger.tournamentId}}"
      winners: "{{action.winners}}"
      totalPrizes: "{{action.totalPrizes}}"